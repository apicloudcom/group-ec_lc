<template>
    <div :style="this.props.style">{{descText}}: {{timeStr}}</div>
</template>

<script>

export default {
    name: 'hoc-count-down-sgm',
    data() {
        return {
            type: 'hoc-count-down-sgm',
            isHighlight : false,
            timeStr: '',
            descText: this.props.descText !== undefined ? this.props.descText : '剩余',
            endTime: this.props.endTime !== undefined ? this.props.endtime : 2000000, // 剩余毫秒数
        }
    },
    methods: {
        installed() {
            this.countTime(this.endTime)
        },
        countTime(endtime, ms){
            if (endtime <= 0) {
                this.timeStr = '00:00:00';
                return;
            }
            // 倒计时
            let hh = 0;
            let mm = 0;
            let ss = 0;
            if (!ms) {ms = 9;}
            let _endtime = parseInt(endtime) + 500;
            hh = parseInt(_endtime / 3600 / 1000);
            let _mm = _endtime - hh * 3600 * 1000;
            mm = parseInt(_mm / 60 / 1000);
            let _ss = _mm - mm * 1000 * 60;
            ss = parseInt(_ss / 1000);
            ms = parseInt(ms) - 1;
            hh = hh < 10 ? '0' + hh : hh;
            mm = mm < 10 ? '0' + mm : mm;
            ss = ss < 10 ? '0' + ss : ss;
            let _str = hh + ':' + mm + ':' + ss;
            this.timeStr = _str;
            let interval = 1000;
            setTimeout(()=>{
                this.countTime(endtime - interval, ms || 9);
            }, interval);
        }
    }
}
</script>